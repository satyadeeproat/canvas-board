{"version":3,"sources":["utils/tools-list.js","toolbox/tools/index.js","utils/stroke-list.js","toolbox/strokes/index.js","toolbox/left-box.js","utils/colors.js","colors/index.js","canvas-box/canvas-box.js","App.js","serviceWorker.js","index.js"],"names":["toolsName","TOOL_PEN","name","icon","faPen","TOOL_HIGHLIGHTER","faHighlighter","TOOL_ERASER","faEraser","allTools","Tools","activeTool","setActiveTool","className","map","tool","index","key","onClick","color","strokes","Strokes","activeStroke","setActiveStroke","stroke","ToolBox","colors","RightBox","activeColor","setActiveColor","data-color","style","backgroundColor","CanvasBox","React","forwardRef","props","ref","startDrawing","finishDrawing","draw","width","height","onMouseDown","onMouseUp","onMouseMove","App","canvasRef","useRef","contextRef","coordinates","x","y","useState","isDrawing","setIsDrawing","useEffect","canvas","current","window","innerWidth","innerHeight","touchAction","context","getContext","scale","strokeStyle","lineWidth","nativeEvent","offsetX","offsetY","beginPath","moveTo","globalAlpha","clearRect","closePath","lineTo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6953f750.chunk.js","sourcesContent":["import { faPen } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHighlighter } from \"@fortawesome/free-solid-svg-icons\";\nimport { faEraser } from \"@fortawesome/free-solid-svg-icons\";\n\n\nexport const toolsName = {\n  TOOL_PEN: {\n    name: 'pen',\n    icon: faPen\n  },\n  TOOL_HIGHLIGHTER: {\n    name: 'highlighter',\n    icon: faHighlighter\n  },\n  TOOL_ERASER: {\n    name: 'eraser',\n    icon: faEraser\n  }\n}\n\nexport const allTools = [\n  toolsName.TOOL_PEN,\n  toolsName.TOOL_HIGHLIGHTER,\n  toolsName.TOOL_ERASER\n];\n\n// export default allTools;","import React from \"react\";\nimport {allTools} from \"../../utils/tools-list\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Tools = ({ activeTool, setActiveTool }) => {\n  return (\n    <div className=\"group tools\">\n      {allTools.map((tool, index) => (\n        <div\n          key={index}\n          className={`item ${activeTool === index ? \"active\" : \"\"}`}\n          onClick={() => setActiveTool(index)}\n        >\n          <FontAwesomeIcon icon={tool.icon} color=\"white\" />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Tools;\n","const strokes = [1, 3, 5, 7, 9];\n\n\nexport default strokes;","import React from \"react\";\nimport strokes from '../../utils/stroke-list';\n\nconst Strokes = ({activeStroke, setActiveStroke}) => {\n  return (\n    <div className=\"group stroks\">\n      {strokes.map((stroke, index) => \n        <div key={index} onClick={() => setActiveStroke(index)}\n        className={`item ${activeStroke === index ? \"active\" : \"\"}`}>\n        <div className={`stroke stroke-${index}`}></div>\n      </div>\n      )}\n    </div>\n  );\n};\n\nexport default Strokes;","import React from 'react';\nimport Tools from './tools';\nimport Strokes from './strokes';\nconst ToolBox = ({activeStroke, setActiveStroke, activeTool, setActiveTool}) => {\n  return (\n    <div className=\"toolbox left\">\n      <Tools \n              activeTool={activeTool}\n              setActiveTool={setActiveTool}\n      \n      />\n      <Strokes\n        activeStroke={activeStroke}\n        setActiveStroke={setActiveStroke}\n        />\n  </div>\n  )\n}\n\nexport default ToolBox;","const colors = [\n  \"#ffffff\",\n  \"#000000\",\n  \"#ff0000\",\n  \"#00ff00\",\n  \"#0000ff\",\n  \"#00ffff\",\n  \"#ff00ff\",\n  \"#ffff00\",\n  \"#c46f0f\",\n  \"#fd8f27\",\n  \"#0099ff\",\n  \"#ff009d\",\n];\n\nexport default colors;\n","import React from \"react\";\nimport colors from '../utils/colors';\n\n  \nconst RightBox = ({activeColor, setActiveColor}) => {\n  return (\n    <div className=\"toolbox right\">\n      <div className=\"group colors\">\n        {colors.map((color, index) => (\n          <div\n            key={index}\n            onClick={() => setActiveColor(index)}\n            className={`item ${activeColor === index ? \"active\" : \"\"}`}\n            data-color={color}\n          >\n            <div\n              className=\"swatch\"\n              style={{ backgroundColor: `${color}` }}\n            ></div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RightBox;\n","import React from \"react\";\n\nconst CanvasBox = React.forwardRef((props, ref) => {\n  const { startDrawing, finishDrawing, draw } = props;\n  return (\n    <div className=\"canvas-box\">\n      <canvas\n        width={500}\n        height={500}\n        ref={ref}\n        onMouseDown={startDrawing}\n        onMouseUp={finishDrawing}\n        onMouseMove={draw}\n      />\n    </div>\n  );\n});\n\nexport default CanvasBox;\n","import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport LeftBox from './toolbox/left-box';\nimport RightBox from './colors';\nimport CanvasBox from './canvas-box/canvas-box';\nimport colors from './utils/colors';\nimport {allTools, toolsName} from './utils/tools-list';\nimport strokes from './utils/stroke-list';\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const coordinates = useRef({x: 0, y: 0});\n  \n  const [isDrawing, setIsDrawing] = useState(false);\n  const [activeColor, setActiveColor] = useState(1);\n  const [activeTool, setActiveTool] = useState(0);\n  const [activeStroke, setActiveStroke] = useState(0);\n\n  /**\n   * define the context with collors and line idth\n   */\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth*2;\n    canvas.height = window.innerHeight*2;\n    canvas.style.width = `${window.innerWidth}px`;    \n    canvas.style.height = `${window.innerHeight}px`;\n    canvas.style.touchAction = \"none\";\n    const context = canvas.getContext('2d');\n    context.scale(2,2);\n    context.strokeStyle = colors[0];\n    contextRef.current = context;\n    contextRef.current.lineWidth = strokes[2];\n  }, [])\n  \n  /**\n   * Change line width of canvas context on change in active stroke\n   */\n  useEffect(() => {\n    contextRef.current.lineWidth = strokes[activeStroke];\n  }, [activeStroke]);\n\n    /**\n   * Change stroke color of canvas context on change in active color\n   */\n  useEffect(() => {\n    contextRef.current.strokeStyle = colors[activeColor];\n  }, [activeColor]);\n\n  /**\n   * Set stroke size 5px for highlighter\n   */\n  useEffect(() => {\n    let selectedTool = allTools[activeTool].name;\n    switch(selectedTool) {\n      case toolsName.TOOL_HIGHLIGHTER.name: {\n        setActiveStroke(2);\n        break;\n      }\n      default: ;\n    }\n  }, [activeTool]);\n\n\n  /**\n   * On mouse down. start path\n   * @param {{string}} offsetX \n   * @param {{string}} offsetY\n   */\n  const startDrawing = ({nativeEvent}) => {\n    const {offsetX: x, offsetY: y} = nativeEvent;\n    let selectedTool = allTools[activeTool].name;\n    switch(selectedTool) {\n      case toolsName.TOOL_PEN.name: {\n        contextRef.current.beginPath();\n        contextRef.current.moveTo(x, y);\n          break;\n      }\n      case toolsName.TOOL_HIGHLIGHTER.name: {\n        contextRef.current.globalAlpha = 0.5;\n        coordinates.current.x = x;\n        coordinates.current.y = y;\n        break;\n      }\n      case toolsName.TOOL_ERASER.name: {\n        contextRef.current.clearRect(0, 0, contextRef.current.lineWidth, contextRef.current.lineWidth);\n        break;\n      }\n      default: ;\n    }\n    setIsDrawing(true);\n  }\n  /**\n   * When drawing is down. Close path\n   */\n  const finishDrawing = () => {\n    contextRef.current.closePath();    \n    setIsDrawing(false);\n  }\n\n  /**\n   * On mouse move. draw the path\n   * @param {{string}} offsetX \n   * @param {{string}} offsetY\n   */\n  const draw = ({nativeEvent}) => {\n    if(!isDrawing) {\n      return;\n    }\n    let {offsetX, offsetY} = nativeEvent;\n    if(offsetX <= 500 && offsetY <=500) {\n      if(allTools[activeTool].name === 'eraser') {\n        contextRef.current.clearRect(offsetX, offsetY, contextRef.current.lineWidth, contextRef.current.lineWidth);\n      } else if (allTools[activeTool].name === 'pen'){\n        contextRef.current.lineTo(offsetX, offsetY);\n        contextRef.current.stroke();\n      } else {\n        contextRef.current.beginPath();\n        contextRef.current.moveTo(coordinates.current.x, coordinates.current.y);\n        contextRef.current.lineTo(offsetX, offsetY);\n        contextRef.current.stroke();\n        coordinates.current.x = offsetX;\n        coordinates.current.y = offsetY;\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <LeftBox\n        activeStroke={activeStroke}\n        setActiveStroke={setActiveStroke}\n        activeTool={activeTool}\n        setActiveTool={setActiveTool}\n      />\n      <CanvasBox ref={canvasRef} \n              startDrawing={startDrawing}\n              finishDrawing={finishDrawing}\n              draw={draw}\n      \n      />\n      <RightBox activeColor={activeColor}\n      setActiveColor={setActiveColor}\n    />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}